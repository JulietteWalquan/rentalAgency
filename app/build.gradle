/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Apply the jacoco plugin to generate reports after tests run.
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Use AssertJ for more powerful assertions.
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.25.3'

    // Use Mockito for mocking objects in tests.
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.10.0'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

//new task that only launch test related to the class in the packages agencyTest
tasks.register('agencyTest', Test) {
    useJUnitPlatform() {
        includeTags("agency")
    }
}

//new task that only launch test related to the class in the packages utilsTest
tasks.register('utilsTest', Test) {
    useJUnitPlatform() {
        includeTags("utils")
    }
}

tasks.test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
tasks.jacocoTestReport {
    reports {
        html.outputLocation = layout.buildDirectory.dir('../jacocoReports/reportHTML')
        xml.required = true
        xml.outputLocation =  layout.buildDirectory.file('../jacocoReports/reportXML/report.xml')
        csv.required = false
    }
}
